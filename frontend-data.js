// === FONCTIONS SERVEUR CORRIG√âES ===
async function sauvegarderVersServeur() {
  console.log('‚¨ÜÔ∏è Sauvegarde vers serveur');
  try {
    // Utiliser le format compatible avec data.js
    const dataToSave = {
      donneesParMois: donneesParMois,
      moisActuel: moisActuel,
      anneeActuelle: anneeActuelle,
      lastUpdate: new Date().toISOString(),
      version: '2.5-corrige',
      source: 'dashboard-commercial'
    };

    console.log('üì§ Donn√©es √† envoyer:', dataToSave);

    // Utiliser l'endpoint /api/data avec POST
    const response = await fetch(`/api/data?d=${DATASET}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(dataToSave)
    });

    console.log('üì° R√©ponse serveur:', response.status, response.statusText);

    if (response.ok) {
      const result = await response.json();
      if (result.ok) {
        showNotification('‚úÖ Donn√©es sauvegard√©es sur le serveur !');
        console.log('‚úÖ Sauvegarde r√©ussie:', result);
      } else {
        throw new Error(result.error || 'Erreur de sauvegarde');
      }
    } else {
      const errorText = await response.text();
      console.error('‚ùå Erreur serveur:', response.status, errorText);
      throw new Error(`Erreur serveur: ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde serveur:', error);
    showNotification(`‚ùå Erreur: ${error.message}`, 'warning');
  }
}

async function chargerDepuisServeur() {
  console.log('‚¨áÔ∏è Chargement depuis serveur');
  try {
    // Utiliser l'endpoint /api/data avec GET
    const response = await fetch(`/api/data?d=${DATASET}`);
    
    console.log('üì° R√©ponse data:', response.status, response.statusText);
    
    if (response.ok) {
      const result = await response.json();
      console.log('üì• Donn√©es re√ßues:', result);
      
      if (result.donneesParMois) {
        // Les donn√©es sont au bon format
        donneesParMois = result.donneesParMois;
        
        // Mise √† jour du mois/ann√©e si fournis
        if (result.moisActuel !== undefined) moisActuel = result.moisActuel;
        if (result.anneeActuelle !== undefined) anneeActuelle = result.anneeActuelle;
        
        // S'assurer que les donn√©es du mois actuel existent
        const key = getMoisKey();
        if (!donneesParMois[key]) {
          donneesParMois[key] = vendeurDefaults();
        }
        
        updateMoisAffichage();
        updateActiveTab();
        showNotification('‚úÖ Donn√©es charg√©es depuis le serveur !');
        console.log('‚úÖ Chargement r√©ussi');
      } else {
        // Premi√®re utilisation - initialiser
        showNotification('‚ÑπÔ∏è Premi√®re utilisation - donn√©es initialis√©es', 'warning');
        initialiserDonnees();
        updateActiveTab();
      }
    } else {
      throw new Error(`Erreur serveur: ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur chargement serveur:', error);
    showNotification(`‚ùå Erreur: ${error.message}`, 'warning');
    // En cas d'erreur, initialiser les donn√©es par d√©faut
    initialiserDonnees();
    updateActiveTab();
  }
}
