// frontend-data.js - Compatible avec votre HTML existant
// Ce fichier remplace la logique localStorage par des appels √† votre API Blob

console.log('üöÄ Chargement frontend-data.js - Version API Blob');

// Configuration
const API_ENDPOINT = '/api/data';
const DATASET = new URLSearchParams(location.search).get('d') || 'default';
const MOIS_NOMS = ['Janvier','F√©vrier','Mars','Avril','Mai','Juin','Juillet','Ao√ªt','Septembre','Octobre','Novembre','D√©cembre'];

// Variables globales - compatibles avec votre code existant
let moisActuel = new Date().getMonth();
let anneeActuelle = new Date().getFullYear();
let donneesParMois = {};
let isLoading = false;

// Fonction pour obtenir la cl√© du mois (compatible avec votre code)
function getMoisKey(mois = moisActuel, annee = anneeActuelle) {
    return `${annee}-${mois}`;
}

// Fonction pour obtenir les donn√©es actuelles (compatible avec votre code)
function getDonneesActuelles() {
    const key = getMoisKey();
    if (!donneesParMois[key]) {
        donneesParMois[key] = vendeurDefaults();
    }
    return donneesParMois[key];
}

// Fonction pour les valeurs par d√©faut (compatible avec votre code)
function vendeurDefaults() {
    return {
        'Vincent': { prospects: 0, ventes: 0, ca: 0, objectif: 80000, margeValeur: 2500 },
        'Raphael': { prospects: 0, ventes: 0, ca: 0, objectif: 100000, margeValeur: 2600 },
        'L√©o': { prospects: 0, ventes: 0, ca: 0, objectif: 75000, margeValeur: 2200 },
        'Pablo': { prospects: 0, ventes: 0, ca: 0, objectif: 90000, margeValeur: 2400 },
        'Nathan': { prospects: 0, ventes: 0, ca: 0, objectif: 85000, margeValeur: 2300 }
    };
}

// üì° NOUVEAU : Charger les donn√©es depuis votre API Blob
async function chargerDepuisServeurAuto() {
    if (isLoading) return;
    isLoading = true;
    
    try {
        console.log('üì° Chargement automatique depuis API Blob...');
        
        const response = await fetch(`${API_ENDPOINT}?d=${encodeURIComponent(DATASET)}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üì¶ Donn√©es re√ßues depuis Blob:', data);
        
        // Int√©grer les donn√©es re√ßues
        if (data && data.donneesParMois) {
            donneesParMois = data.donneesParMois;
            
            // Mettre √† jour les variables globales si pr√©sentes
            if (typeof data.moisActuel === 'number') moisActuel = data.moisActuel;
            if (typeof data.anneeActuelle === 'number') anneeActuelle = data.anneeActuelle;
            
            console.log('‚úÖ Donn√©es int√©gr√©es depuis le serveur');
        } else {
            console.log('üìù Aucune donn√©e serveur - utilisation des d√©fauts');
            initialiserDonnees();
        }

    } catch (error) {
        console.error('‚ùå Erreur lors du chargement auto:', error);
        // Utiliser les donn√©es par d√©faut en cas d'erreur
        initialiserDonnees();
    } finally {
        isLoading = false;
    }
}

// üíæ NOUVEAU : Sauvegarder automatiquement vers votre API Blob
async function sauvegarderVersServeurAuto() {
    try {
        console.log('üíæ Sauvegarde automatique vers API Blob...');
        
        const payload = {
            donneesParMois,
            moisActuel,
            anneeActuelle,
            dateExport: new Date().toISOString(),
            version: '2.5-blob-integration'
        };

        const response = await fetch(`${API_ENDPOINT}?d=${encodeURIComponent(DATASET)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        
        if (result.ok) {
            console.log('‚úÖ Sauvegarde automatique r√©ussie');
            console.log('üîó URL Blob:', result.url);
            return true;
        } else {
            throw new Error(result.error || 'Erreur de sauvegarde');
        }

    } catch (error) {
        console.error('‚ùå Erreur sauvegarde automatique:', error);
        return false;
    }
}

// Fonction pour initialiser les donn√©es (compatible avec votre code)
function initialiserDonnees() {
    console.log('üîß Initialisation des donn√©es par d√©faut');
    for (let mois = 0; mois < 12; mois++) {
        const key = `${anneeActuelle}-${mois}`;
        if (!donneesParMois[key]) {
            donneesParMois[key] = vendeurDefaults();
        }
    }
}

// üîÑ MODIFICATION : Votre fonction chargerDepuisServeur existante - avec int√©gration Blob
async function chargerDepuisServeur() {
    console.log('‚¨áÔ∏è Chargement manuel depuis serveur');
    
    const originalText = 'Charger depuis serveur';
    const loadBtn = document.getElementById('load-btn');
    
    if (loadBtn) {
        loadBtn.textContent = '‚è≥ Chargement...';
        loadBtn.disabled = true;
    }
    
    try {
        await chargerDepuisServeurAuto();
        
        // Mettre √† jour l'affichage apr√®s le chargement
        updateMoisAffichage();
        updateActiveTab();
        updateSaisieFields();
        
        showNotification('‚úÖ Donn√©es charg√©es avec succ√®s depuis le serveur');
        
    } catch (error) {
        console.error('Erreur chargement manuel:', error);
        showNotification('‚ùå Erreur de chargement', 'warning');
    } finally {
        if (loadBtn) {
            loadBtn.textContent = '‚¨áÔ∏è Charger depuis serveur';
            loadBtn.disabled = false;
        }
    }
}

// üîÑ MODIFICATION : Votre fonction sauvegarderVersServeur existante - avec int√©gration Blob
async function sauvegarderVersServeur() {
    console.log('‚¨ÜÔ∏è Sauvegarde manuelle vers serveur');
    
    const saveBtn = document.getElementById('save-server-btn');
    const originalText = 'Sauvegarder vers serveur';
    
    if (saveBtn) {
        saveBtn.textContent = '‚è≥ Sauvegarde...';
        saveBtn.disabled = true;
    }
    
    try {
        const success = await sauvegarderVersServeurAuto();
        
        if (success) {
            showNotification('‚úÖ Donn√©es sauvegard√©es sur le serveur');
        } else {
            showNotification('‚ùå Erreur de sauvegarde', 'warning');
        }
        
    } catch (error) {
        console.error('Erreur sauvegarde manuelle:', error);
        showNotification('‚ùå Erreur de sauvegarde', 'warning');
    } finally {
        if (saveBtn) {
            saveBtn.textContent = '‚¨ÜÔ∏è Sauvegarder vers serveur';
            saveBtn.disabled = false;
        }
    }
}

// üîÑ MODIFICATION : Votre fonction sauvegarderDonnees existante - avec auto-sauvegarde
function sauvegarderDonneesAvecBlob() {
    console.log('üíæ Sauvegarde donn√©es avec int√©gration Blob');
    
    const v = document.getElementById('vendeur-select')?.value;
    const prospects = parseInt(document.getElementById('prospects-input')?.value) || 0;
    const ventes = parseInt(document.getElementById('ventes-input')?.value) || 0;
    const ca = parseInt(document.getElementById('ca-input')?.value) || 0;
    const margeInput = document.getElementById('marge-input')?.value;
    const objectifInput = document.getElementById('objectif-input')?.value;
    
    if (!v) {
        showNotification('Erreur: S√©lectionnez un vendeur', 'warning');
        return;
    }
    
    if (prospects === 0 && ventes === 0 && ca === 0) {
        showNotification('Veuillez saisir au moins une valeur', 'warning');
        return;
    }
    
    if (ventes > prospects && prospects > 0) {
        showNotification('Erreur: Les ventes ne peuvent pas d√©passer les prospects', 'warning');
        return;
    }
    
    const d = getDonneesActuelles();
    d[v].prospects += prospects;
    d[v].ventes += ventes;
    d[v].ca += ca;
    
    if (margeInput !== '') d[v].margeValeur = Math.max(0, parseFloat(margeInput));
    if (objectifInput !== '') d[v].objectif = Math.max(0, parseFloat(objectifInput));
    
    // Reset inputs
    ['prospects-input', 'ventes-input', 'ca-input'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.value = '';
    });
    
    // üÜï SAUVEGARDE AUTOMATIQUE vers Blob
    sauvegarderVersServeurAuto().then(success => {
        if (success) {
            showNotification(`‚úÖ Donn√©es de ${v} sauvegard√©es et synchronis√©es`);
        } else {
            showNotification(`‚ö†Ô∏è Donn√©es de ${v} sauvegard√©es localement seulement`);
        }
    });
    
    updateActiveTab();
}

// üÜï NOUVELLE FONCTION : Synchronisation p√©riodique
function demarrerSynchronisationPeriodique() {
    console.log('üîÑ D√©marrage synchronisation p√©riodique (toutes les 5 minutes)');
    
    setInterval(async () => {
        console.log('üîÑ Synchronisation p√©riodique...');
        try {
            await chargerDepuisServeurAuto();
            updateActiveTab(); // Mettre √† jour l'affichage avec les nouvelles donn√©es
        } catch (error) {
            console.error('Erreur synchronisation p√©riodique:', error);
        }
    }, 5 * 60 * 1000); // 5 minutes
}

// üîÑ REMPLACEMENT : Remplacer votre fonction sauvegarderDonnees existante
function remplacerFonctionSauvegarde() {
    // Remplacer la fonction globale existante
    if (typeof window.sauvegarderDonnees === 'function') {
        console.log('üîÑ Remplacement de la fonction sauvegarderDonnees existante');
        window.sauvegarderDonnees = sauvegarderDonneesAvecBlob;
    }
}

// üÜï NOUVELLE FONCTION : Initialisation avec chargement Blob
async function initialiserAvecBlob() {
    console.log('üöÄ Initialisation avec int√©gration Blob');
    
    try {
        // Charger les donn√©es depuis le serveur
        await chargerDepuisServeurAuto();
        
        // Initialiser les donn√©es si n√©cessaire
        if (Object.keys(donneesParMois).length === 0) {
            initialiserDonnees();
        }
        
        // D√©marrer la synchronisation p√©riodique
        demarrerSynchronisationPeriodique();
        
        // Remplacer les fonctions existantes
        remplacerFonctionSauvegarde();
        
        console.log('‚úÖ Int√©gration Blob termin√©e avec succ√®s');
        showNotification('üåê Dashboard synchronis√© avec le cloud', 'success');
        
    } catch (error) {
        console.error('‚ùå Erreur initialisation Blob:', error);
        // Continuer avec les donn√©es par d√©faut
        initialiserDonnees();
        showNotification('‚ö†Ô∏è Mode hors ligne - donn√©es locales uniquement', 'warning');
    }
}

// üöÄ AUTO-INITIALISATION
console.log('‚è≥ Attente du chargement complet du DOM...');

// Attendre que votre script principal soit charg√©
function attendreInitialisationPrincipale() {
    if (typeof donneesParMois !== 'undefined' && typeof showNotification === 'function') {
        console.log('‚úÖ Script principal d√©tect√© - lancement int√©gration Blob');
        initialiserAvecBlob();
    } else {
        console.log('‚è≥ Script principal non encore charg√© - nouvelle tentative dans 500ms');
        setTimeout(attendreInitialisationPrincipale, 500);
    }
}

// D√©marrer l'attente apr√®s le chargement du DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(attendreInitialisationPrincipale, 1000);
    });
} else {
    setTimeout(attendreInitialisationPrincipale, 1000);
}

console.log('üì° Frontend-data.js charg√© - Int√©gration Blob pr√™te');
